"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка
на наличие только чисел.
Проверить работу исключения на реальном примере.
Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.

Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта,
введя, например, команду “stop”. При этом скрипт завершается, сформированный список
выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента
и вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить
соответствующее сообщение. При этом работа скрипта не должна завершаться.
"""


class ElemIsNotNumError(Exception):

    def __init__(self, text):
        self.text = text


if __name__ == '__main__':
    user_list = []
    while True:
        user_str = input("Введите элемент списка или 'stop' для завершения: ")
        if user_str == 'stop':
            break
        try:
            try:
                user_list.append(float(user_str))
            except ValueError as error:
                raise ElemIsNotNumError('Список может содержать только числа!')
        except ElemIsNotNumError as error:
            print(error)

    print(user_list)
